/*The purpose of this program is to explore vector modification using 
C++. I decided to use distances between planets as the source of data.
The vector is created with 7 data elements. When the user is prompted to
enter a planet to begin on, the program changes the vector. A "0" is added at the
point in the vector where the user decides to begin.

The program then takes the vector and computes the distance either forward or backwards
depending on the input of the user. For example, the user can enter a beginning point of 1 and
and ending point of 5 and get results just the same as if the beginning point was 5 and the
ending point was 1. Those results are then sent to 3 other functions to get
the approximate hours, days and time. The results are then displayed to the user.
*/

#include "stdafx.h"
#include <iostream>
#include <vector>
#include <stdint.h>
using namespace std;

/*Function Declarations*/

uint64_t ComputeDistanceF(const vector<uint64_t>&, int, int);
uint64_t ComputeDistanceB(const vector<uint64_t>&, int, int);
uint64_t ComputeHours(uint64_t);
uint64_t ComputeDays(uint64_t);
uint64_t ComputeYears(uint64_t);

int main()
{
	int BeginningPoint;
	int EndingPoint;
	char Repeat;
	uint64_t TotalDistance = 0;

	//Repeat process with user entry of 'y'. 
	do {

		//Create Vector
		std::vector<uint64_t> Distances;
		Distances.push_back(31248757);
		Distances.push_back(25724767);
		Distances.push_back(48678219);
		Distances.push_back(342012346);
		Distances.push_back(401592178);
		Distances.push_back(900377530);
		Distances.push_back(1011297430);

		//Repeat question if BeginningPoint user entry is invalid
		do {

			//Repeat question if EndingPoint user entry us invalid
			do {

				cout << "This program determines the distance between planets in our solar system" << endl
					<< "The program will also determine how many earth years it will take to get from one planet 
						to another in a space shuttle." << endl
					<< "List of planets: " << endl
					<< "1. Mercury" << endl
					<< "2. Venus" << endl
					<< "3. Earth" << endl
					<< "4. Mars" << endl
					<< "5. Jupiter" << endl
					<< "6. Saturn" << endl
					<< "7. Uranus" << endl
					<< "8. Neptune" << endl
					<< "Enter the number of the planet to begin the program: ";

				//Get user beginning point
				cin >> BeginningPoint;

				if (BeginningPoint > 8 || BeginningPoint < 1) {
					cout << "Please enter a correct choice. \n\n";
				}
			} while (BeginningPoint > 8 || BeginningPoint < 1); //End check for correct beinning point input

			cout << "Enter an Ending planet: ";

			//Get user ending point
			cin >> EndingPoint;

			if (EndingPoint > 8 || EndingPoint < 1) {
				cout << "Please enter a correct choice. \n\n";
			}
		} while (EndingPoint > 8 || EndingPoint < 1); //End check for correct ending point input

	        //Add a "0" into the vector where the user decides to begin.
		if (BeginningPoint <= 7) {
			Distances.insert(Distances.begin() + BeginningPoint - 1, 0);
		}

		//If the user enters 8, a "0" needs to be added to the end of the vector because it currently 
		//only holds 7 values.
		else if (BeginningPoint == 8) {
			Distances.push_back(0);
		}

		if (EndingPoint > BeginningPoint) {

			//Compute distance from beginning to end
			TotalDistance = ComputeDistanceF(Distances, (BeginningPoint - 1), (EndingPoint - 1));
		}
		else if (EndingPoint < BeginningPoint) {

			//Compute distance from end to beginning
			TotalDistance = ComputeDistanceB(Distances, (BeginningPoint - 1), (EndingPoint - 1));
		}
		else if (BeginningPoint == EndingPoint) {
			TotalDistance = 0;
		}

		//Compute hours
		uint64_t TotalHours = ComputeHours(TotalDistance);

		//Comppute Days
		uint64_t TotalDays = ComputeDays(TotalDistance);

		//Compute years
		uint64_t TotalYears = ComputeYears(TotalDistance);

		cout << TotalDistance << " Miles in between these planets" << endl;

		if (TotalYears > 0) {
			cout << "It would take approximately " << TotalHours << " hours or " 
			     << TotalYears << " years to travel this distance." << endl
				 << "Press 'Y' to repeat the program or press 'Q' to quit." << endl;
			cin >> Repeat;
		}
		else {
			cout << "It would take approximately " << TotalHours << " hours or " 
			     << TotalDays << " approximately days to travel this distance." << endl
		         << "Press 'Y' to repeat the program or press 'Q' to quit." << endl;
			cin >> Repeat;
		}


		//Check if user entry is valid. Repeat if 'y' or Quit if 'q'.
		if (Repeat != 'y' && Repeat != 'q') {
			do {
				cout << "Please enter the correct character: ";
				cin >> Repeat;
			} while (Repeat != 'q' && Repeat != 'y');
		}
	} while (Repeat == 'y' && Repeat != 'q'); //End check for correct user response.

	return 0;
}

/* Fuctions below compute distances between the starting planet
and the ending planet. The vector array is passed into the funciton
and iterated through while adding the values together.
*/

//Use if beginning point is less than ending point.
uint64_t ComputeDistanceF(const vector<uint64_t>& VArray, int BeginningNum, int FinalNum) {

	uint64_t result = 0;

	for (BeginningNum; BeginningNum <= FinalNum; BeginningNum++) {
		result += VArray[BeginningNum];
	}
	return(result);
}

//Use if ending point is less than beginning point.
uint64_t ComputeDistanceB(const vector<uint64_t>& VArray, int BeginningNum, int FinalNum) {

	uint64_t result = 0;

	for (BeginningNum; BeginningNum >= FinalNum; BeginningNum--) {
		result += VArray[BeginningNum];
	}
	return(result);
}

/* Functions below compute time using a 17,500 mph average speed
of the space shuttle. These Variables can be changed in the future to
accommodate different speeds or vehicles.
*/

uint64_t ComputeHours(uint64_t distance) {

	uint64_t Hours = (distance / 17500);
	return(Hours);
}

uint64_t ComputeDays(uint64_t distance) {

	uint64_t Days = ((distance / 17500) / 24);
	return(Days);
}

uint64_t ComputeYears(uint64_t distance) {

	uint64_t Years(((distance / 17500) / 24) / 365);
	return(Years);
}
